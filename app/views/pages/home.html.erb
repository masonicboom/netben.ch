Welcome home.

<style type="text/css">
#map {
  height: 400px;
  width: 600px;
  border: 1px solid #333;
  margin-top: 0.6em;
}

#ndtAppletBackground {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: black;
  opacity: 0.4;
  z-index: 2;
  display: none;
}

#ndtApplet {
  z-index: 3;
  width: 400px;
  margin: auto;
  margin-top: 100px;
}

#testResults {
  display: none;
}
</style>

<form id="testResults" action="/tests" method="post">
  <input type="hidden" name="cafe[google_id]" value="" />
  <input type="hidden" name="cafe[name]" value="" />
  <input type="hidden" name="cafe[latitude]" value="" />
  <input type="hidden" name="cafe[longitude]" value="" />
  <input type="hidden" name="test_result[upload_mbps]" value="" />
  <input type="hidden" name="test_result[download_mbps]" value="" />
  <input type="hidden" name="test_result[loss_rate]" value="" />
  <input type="submit" value="Upload" />
</form>

<div id="ndtAppletBackground">
  <div id="ndtApplet">
    <applet name="NDT" code=Tcpbw100.class codebase="http://ndt.iupui.donar.measurement-lab.org:7123" ARCHIVE="Tcpbw100.jar" width=400 height=400></applet>
  </div>
</div>

<div id="map"></div>

<div id="cafeList"></div>

<%= javascript_include_tag "underscore-min" %>
<script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?libraries=places&sensor=false"></script>

<script type='text/javascript'>

var map;
var infowindow;
var placesService;
var markersArray = [];


function init(position) {
  var latitude = position.coords.latitude;
  var longitude = position.coords.longitude;
  var location = new google.maps.LatLng(latitude, longitude);
  
  map = new google.maps.Map(document.getElementById('map'), {
    mapTypeId: google.maps.MapTypeId.ROADMAP,
    center: location,
    zoom: 16,
  });
  infowindow = new google.maps.InfoWindow();
  placesService = new google.maps.places.PlacesService(map);

  // Set event listeners to update the list of places when the map is moved.
  google.maps.event.addListener(map, 'dragend', retrievePlaces);
  google.maps.event.addListener(map, 'zoom_changed', retrievePlaces);
  
  // This listener is needed to get the initial list, but immediately removed
  // to prevent flicker of markers because it's redundant with the other event
  // listeners (above).
  var handle = google.maps.event.addListener(map, 'tilesloaded', function() {
    google.maps.event.removeListener(handle);
    retrievePlaces();
  });
}


// Gets all cafes visible on the map.
function retrievePlaces() {
  clearMarkers();
  $("#cafeList").empty();
  
  var request = {
    bounds: map.getBounds(),
    types: ['cafe'],
  };
  placesService.search(request, function(results, status) {
    if (status == google.maps.places.PlacesServiceStatus.OK) {
      //console.log(results);
      
      for (var i = 0; i < results.length; i++) {
        var place = results[i];
        createMarker(place); 
        createListEntry(place)
      }
    }
  });
}


// From http://code.google.com/apis/maps/documentation/javascript/overlays.html#RemovingOverlays.
function clearMarkers() {
  if (markersArray) {
    for (i in markersArray) {
      markersArray[i].setMap(null);
    }
    markersArray.length = 0;
  }
}


var cafeListEntryTemplate = _.template("<div class='entry'><%%= place.name %> <a href='javascript:runTest(\"<%%- place.name %>\", \"<%%= place.geometry.location.lat() %>\", \"<%%= place.geometry.location.lng() %>\", \"<%%= place.id %>\")'>run test</a></div>");
function createListEntry(place) {
  var entryHtml = cafeListEntryTemplate({ place: place });
  $('#cafeList').append($(entryHtml));
}


// Puts a marker on the map.
function createMarker(place) {
  var placeLoc = place.geometry.location;
  var marker = new google.maps.Marker({
    map: map,
    position: place.geometry.location
  });
  markersArray.push(marker);

  google.maps.event.addListener(marker, 'click', function() {
    infowindow.setContent(place.name);
    infowindow.open(map, this);
  });
}


// Run the bandwidth and speed test.
function runTest(place_name, place_latitude, place_longitude, place_google_id) {
  $("#ndtAppletBackground").toggle();
  var NDT = document.applets["NDT"];
  
  // Set up the function to POST results when the applet completes.
  var waitOrSendResults = function() {
    var isReady = NDT.isReady();
    if (isReady == 'no') {
      setTimeout(waitOrSendResults, 50);
      return;
    } else if (isReady == 'failed') {
      console.log('Error running NDT applet.');
    } else if (isReady == 'yes') {
      var uploadMbps = NDT.get_c2sspd();
      var downloadMbps = NDT.get_s2cspd();
      var lossRate = NDT.get_loss();
      
      uploadTestResults(place_google_id, place_name, place_latitude, place_longitude, uploadMbps, downloadMbps, lossRate);
      // POST the results.
      console.log('Done!');
    } else {
      console.log('This should never happen.');
    }
  }
  
  // Run the test, as soon as the applet loads.
  var waitOrRunApplet = function() {
    if (NDT.run_test === undefined) {
      setTimeout(waitOrRunApplet, 50);
      return;
    }
    
    NDT.run_test();
    waitOrSendResults();
  }
  waitOrRunApplet();
  
}


function uploadTestResults(cafe_google_id, cafe_name, cafe_latitude, cafe_longitude, uploadMbps, downloadMbps, lossRate) {
  $("#testResults>input[name='cafe[google_id]']").val(cafe_google_id);
  $("#testResults>input[name='cafe[name]']").val(cafe_name);
  $("#testResults>input[name='cafe[latitude]']").val(cafe_latitude);
  $("#testResults>input[name='cafe[longitude]']").val(cafe_longitude);
  $("#testResults>input[name='test_result[upload_mbps]']").val(uploadMbps);
  $("#testResults>input[name='test_result[download_mbps]']").val(downloadMbps);
  $("#testResults>input[name='test_result[loss_rate]']").val(lossRate);
  $("#testResults").submit();
}


// Hide the applet when the user clicks outside of it.
$("#ndtAppletBackground").click(function(event) {
  $("#ndtAppletBackground").toggle();
});

navigator.geolocation.getCurrentPosition(init);

</script>